<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ferdinad_hx&#39;s Blog</title>
  
  <subtitle>Get busy living, or get busy dying.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.huangxiang666.com/"/>
  <updated>2017-12-10T17:42:21.316Z</updated>
  <id>http://www.huangxiang666.com/</id>
  
  <author>
    <name>ferdinand_hx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器是如何工作的</title>
    <link href="http://www.huangxiang666.com/2017-03-29/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84.html"/>
    <id>http://www.huangxiang666.com/2017-03-29/浏览器是如何工作的.html</id>
    <published>2017-03-29T03:10:38.000Z</published>
    <updated>2017-12-10T17:42:21.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="why？"><a href="#why？" class="headerlink" title="why？"></a>why？</h2><ul><li>Web浏览器是世界上使用最广泛的软件。</li><li>浏览器提供web资源并创建可以允许web应用程序的沙箱环境。</li><li>浏览器实现这一点的方式非常复杂，并且由许多不同的标准决定。</li><li>浏览器的一些机制其实是具有着欺骗性和反直觉性。</li><li>了解浏览器的工作原理为我们提高网站/网页类应用程序的效率和代码的组织结构提供了理论依据。</li></ul><a id="more"></a><h2 id="复杂"><a href="#复杂" class="headerlink" title="复杂"></a>复杂</h2><ul><li>这里无法讲解浏览器工作原理的所有细节。</li><li>每个浏览器都有自己的实现方式。</li></ul><h2 id="一般和模块化的方法"><a href="#一般和模块化的方法" class="headerlink" title="一般和模块化的方法"></a>一般和模块化的方法</h2><ul><li>浏览器遵循相同的标准</li><li>大多数浏览器有着相同的总体结构和同样的模块</li></ul><p><strong>本文将讨论这些共同行为。</strong></p><h2 id="浏览器的两个主要模块"><a href="#浏览器的两个主要模块" class="headerlink" title="浏览器的两个主要模块"></a>浏览器的两个主要模块</h2><ul><li>渲染引擎（也成为布局引擎）</li><li>Javascript解释器</li></ul><h3 id="不同浏览器使用的渲染引擎不一样"><a href="#不同浏览器使用的渲染引擎不一样" class="headerlink" title="不同浏览器使用的渲染引擎不一样"></a>不同浏览器使用的渲染引擎不一样</h3><ul><li>Mozilla Firefox 使用 <code>Gecko</code></li><li>Safari 和 Google Chrome（version 27之前）使用<code>Webkit</code>。</li><li>Chrome使用<code>Blink</code>在version 27之后</li></ul><h3 id="一个web页面的组成"><a href="#一个web页面的组成" class="headerlink" title="一个web页面的组成"></a>一个web页面的组成</h3><ul><li>HTML：应用程序的内容</li><li>CSS： 内容的样式</li><li>Javascript： 应用程序的逻辑部分，有时也是一些动画(animations)等等。</li><li>其它</li></ul><h3 id="渲染引擎（rendering-engine）的工作"><a href="#渲染引擎（rendering-engine）的工作" class="headerlink" title="渲染引擎（rendering engine）的工作"></a>渲染引擎（rendering engine）的工作</h3><p>从HTML,CSS,JS开始，将网页呈现在用户屏幕上，大概需要经过四个阶段：</p><ol><li>处理HTML构建DOM，处理CSS构建CSSOM</li><li>将DOM和CSSOM合并到一个渲染树中</li><li>布局渲染树（render tree）,通过几何计算</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;why？&quot;&gt;&lt;a href=&quot;#why？&quot; class=&quot;headerlink&quot; title=&quot;why？&quot;&gt;&lt;/a&gt;why？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Web浏览器是世界上使用最广泛的软件。&lt;/li&gt;
&lt;li&gt;浏览器提供web资源并创建可以允许web应用程序的沙箱环境。&lt;/li&gt;
&lt;li&gt;浏览器实现这一点的方式非常复杂，并且由许多不同的标准决定。&lt;/li&gt;
&lt;li&gt;浏览器的一些机制其实是具有着欺骗性和反直觉性。&lt;/li&gt;
&lt;li&gt;了解浏览器的工作原理为我们提高网站/网页类应用程序的效率和代码的组织结构提供了理论依据。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浏览器从请求发出到返回经历了什么</title>
    <link href="http://www.huangxiang666.com/2017-03-22/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%8F%91%E5%87%BA%E5%88%B0%E8%BF%94%E5%9B%9E%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88.html"/>
    <id>http://www.huangxiang666.com/2017-03-22/浏览器从请求发出到返回经历了什么.html</id>
    <published>2017-03-22T03:11:07.000Z</published>
    <updated>2017-12-10T17:42:04.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个最简单的http请求，没有代理，ipv4和以下任何步骤都没有问题的情况下："><a href="#一个最简单的http请求，没有代理，ipv4和以下任何步骤都没有问题的情况下：" class="headerlink" title="一个最简单的http请求，没有代理，ipv4和以下任何步骤都没有问题的情况下："></a>一个最简单的http请求，没有代理，ipv4和以下任何步骤都没有问题的情况下：</h2><ol><li>浏览器检查缓存，如果请求的对象在缓存中并且是新的，跳到步骤9。</li><li>浏览器从OS获取服务器的ip地址。</li><li>OS进行DNS查找，并将IP地址返回给浏览器。<a id="more"></a></li><li>浏览器打开到服务器的TCP连接（如果是https则步骤更复杂点,后面再分析）。</li><li>浏览器通过TCP连接发送HTTP请求。</li><li>浏览器接受http响应，并可能关闭TCP连接或将其重新用于另一个请求。</li><li>浏览器检查响应是重定向还是条件响应（3xx的状态码）,授权请求（401），错误（4xx或5xx）等。这些与正常响应（2xx）的处理方式不同。</li><li>如果允许缓存，响应将存储在缓存中。</li><li>浏览器解码响应（比如响应是gzip的需要解压缩）</li><li>浏览器决定如何处理响应（它可能是一个HTML页面，可能是一张图片，也可能是一个声音片段）。</li><li>浏览器渲染响应，或者提示无法识别的类型弹出框警告。</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一个最简单的http请求，没有代理，ipv4和以下任何步骤都没有问题的情况下：&quot;&gt;&lt;a href=&quot;#一个最简单的http请求，没有代理，ipv4和以下任何步骤都没有问题的情况下：&quot; class=&quot;headerlink&quot; title=&quot;一个最简单的http请求，没有代理，ipv4和以下任何步骤都没有问题的情况下：&quot;&gt;&lt;/a&gt;一个最简单的http请求，没有代理，ipv4和以下任何步骤都没有问题的情况下：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;浏览器检查缓存，如果请求的对象在缓存中并且是新的，跳到步骤9。&lt;/li&gt;
&lt;li&gt;浏览器从OS获取服务器的ip地址。&lt;/li&gt;
&lt;li&gt;OS进行DNS查找，并将IP地址返回给浏览器。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hibernate学习教程（二）----ORM 概述</title>
    <link href="http://www.huangxiang666.com/2017-03-17/Hibernate%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89-ORM-%E6%A6%82%E8%BF%B0.html"/>
    <id>http://www.huangxiang666.com/2017-03-17/Hibernate学习教程（二）-ORM-概述.html</id>
    <published>2017-03-17T09:52:32.000Z</published>
    <updated>2017-03-28T08:39:39.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是JDBC"><a href="#什么是JDBC" class="headerlink" title="什么是JDBC"></a>什么是JDBC</h3><ul><li><p>JDBC:Java Database Connectivity，提供一组Java API，用于java程序中访问关系数据库。通过这些API，Java程序能够执行SQL语句并与任何SQL兼容的数据库进行交互。</p></li><li><p>JDBC提供了一种灵活的架构，可以编写一个独立于数据库的应用程序，该应用程序可以在不同的平台上并与不同的DBMS进行修改。</p></li></ul><h3 id="JDBC的优点和缺点"><a href="#JDBC的优点和缺点" class="headerlink" title="JDBC的优点和缺点"></a>JDBC的优点和缺点</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>简洁的SQL处理</td><td>用于大型应用程序时比较复杂</td></tr><tr><td>处理大量数据有着良好的性能</td><td>资源占用开销比较大</td></tr><tr><td>非常适用于小型应用程序</td><td>没有进行封装抽象</td></tr><tr><td>语法简单，学习成本较低</td><td>很难用于MVC模式开发</td></tr><tr><td></td><td>只能用于DBMS查询</td></tr></tbody></table><h3 id="为什么要进行ORM关系映射-Object-Relational-Mapping"><a href="#为什么要进行ORM关系映射-Object-Relational-Mapping" class="headerlink" title="为什么要进行ORM关系映射(Object Relational Mapping)"></a>为什么要进行ORM关系映射(Object Relational Mapping)</h3><p>当我们使用面向对象的系统时，对象模型与关系数据库之间存在不匹配。RDBMS以表格形式表示数据，而面向对象的语言（如Java和C#）将其表现为对象的互联图。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String first_name; </span><br><span class="line">   <span class="keyword">private</span> String last_name;   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> salary;  </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String fname, String lname, <span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.first_name = fname;</span><br><span class="line">      <span class="keyword">this</span>.last_name = lname;</span><br><span class="line">      <span class="keyword">this</span>.salary = salary;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> first_name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> last_name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> salary;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的对象需要被存储和检索到下面的RDBMS表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> EMPLOYEE (</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">   first_name <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">   last_name  <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">   salary     <span class="built_in">INT</span>  <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>那么就会存在以下两个问题：</p><ul><li>如果我们需要在开发了几个页面之后或在应用程序中修改数据库的设计时，应该怎么处理？</li><li>在关系数据库加载和存储对象会暴露以下不匹配问题：</li></ul><table><thead><tr><th>不匹配问题</th><th>描述</th></tr></thead><tbody><tr><td>Granularity（粒度）</td><td>有时，您将有一个对象模型，它具有比数据库中对应表数量更多的类。</td></tr><tr><td>Inheritance（继承）</td><td>RDBMS不定义类似于继承的任何东西，它是面向对象编程语言中的自然范例。</td></tr><tr><td>Identity（对象同一性）</td><td>RDBMS正好定义了“同一性”的一个概念：主键。然而，Java定义了对象标识（a == b）和对象相等（a.equals（b））</td></tr><tr><td>Associations</td><td>面向对象语言使用对象引用表示Associations，RDBMS使用外键列表示</td></tr><tr><td>Navigation</td><td>在Java和RDBMS中访问对象的方式是完全不同的</td></tr></tbody></table><p>对象关系映射（ORM）是处理所有上述不匹配问题的解决方案。</p><h4 id="粒度问题"><a href="#粒度问题" class="headerlink" title="粒度问题"></a>粒度问题</h4><ul><li>粒度：是指你正在使用的类型的大小。</li></ul><h4 id="继承（子类型问题）"><a href="#继承（子类型问题）" class="headerlink" title="继承（子类型问题）"></a>继承（子类型问题）</h4><ul><li>在Java中，使用超类(superclass)和子类(subclass)来实现继承模型。</li><li>在Java中，继承是类型继承(type Inheritance)，而数据库表并不是一种类型。</li><li>数据库产品一般不实现类型或者表继承。而且即使实现了，我们也会遇到数据完整性的问题（对可更新视图的有限完整性规则）。</li><li>一旦把继承进入到模型当中，就有了<code>多态(polymorphism)</code>的可能。SQL数据库缺乏一种明显的表示多态关联的方式，一个外键约束精确的引用一张目标表，定义一个引用多表的外键并不容易。必须编写一个程序化的约束来加强这种完整性规则。</li></ul><p><strong>子类型的这种不匹配的结果是：模型中的继承结构必须在一个不提供继承策略的SQL数据库中被持久化。</strong></p><h3 id="对象同一性"><a href="#对象同一性" class="headerlink" title="对象同一性"></a>对象同一性</h3><p>如果当我们需要检查两个对象是否为同一个对象的时候。解决方法有三种：</p><ul><li><p>在java中：</p><ul><li>对象同一性（粗略等同于内存位置，用a==b检查）</li><li>等同性，通过equals()方法（也成为值等同）的实现来确定。</li></ul></li><li><p>数据库的同一性用主键值来表达。如果使用java中的方法来判断，那么主键值必然会不相等。</p><h3 id="什么是ORM"><a href="#什么是ORM" class="headerlink" title="什么是ORM"></a>什么是ORM</h3></li></ul><p>ORM（对象关系映射），是一种用于关系数据库和面向对象编程语言（如Java、C#）之间转换数据的编程技术。相对于JDBC，ORM具有以下优点：</p><table><thead><tr><th>序号</th><th>优点</th></tr></thead><tbody><tr><td>1</td><td>允许业务逻辑代码访问对象而不是数据库表</td></tr><tr><td>2</td><td>从面向对象的角度考虑隐藏SQL查询的详细信息</td></tr><tr><td>3</td><td>底层基于JDBC</td></tr><tr><td>4</td><td>无需处理数据库实现</td></tr><tr><td>5</td><td>基于业务概念而不是数据库结构的实体</td></tr><tr><td>6</td><td>事务管理和秘钥自动生成</td></tr><tr><td>7</td><td>应用快速开发</td></tr></tbody></table><p>ORM解决方案由以下四个模块组成：</p><table><thead><tr><th>序号</th><th>解决方案</th></tr></thead><tbody><tr><td>1</td><td>用于对持久化类的对象进行基本CRUD操作的API</td></tr><tr><td>2</td><td>用于指定引用类的类和属性的查询的语言或API</td></tr><tr><td>3</td><td>用于指定映射元数据的可配置工具</td></tr><tr><td>4</td><td>用于实现ORM的一项技术，与事务对象交互，执行脏检查、延迟关联抓取以及其它优化功能</td></tr></tbody></table><h3 id="Java中的ORM框架"><a href="#Java中的ORM框架" class="headerlink" title="Java中的ORM框架"></a>Java中的ORM框架</h3><p>Java中有几个持久化框架和ORM选项。持久化框架是一种将对象存储和检索到关系数据库中的ORM服务。</p><ul><li>Enterprise JavaBeans Entity Beans</li><li>Java Data Objects</li><li>Castor</li><li>TopLink</li><li>Spring DAO</li><li>Hibernate</li><li>……. etc.</li></ul><h3 id="ORM和Hibernate的一些好处"><a href="#ORM和Hibernate的一些好处" class="headerlink" title="ORM和Hibernate的一些好处"></a>ORM和Hibernate的一些好处</h3><h4 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h4><p>与持久化相关的代码可能会是java中最冗长的一部分代码，Hibernate除去了许多琐碎的工作，让我们可以把更多的精力集中于业务问题的处理上。<br>无论我们喜欢哪一种应用程序开发策略——自上而下，从一个领域模型开始；或者自底而上，从一个现有的数据库Schema开始——Hibernate与适当的工具一起使用，将明显减少开发时间。</p><h4 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h4><p>更少的代码行使得系统更易于理解，因为它强调业务逻辑甚于那些费力的基础性工作。更重要的是，系统包含的代码越少则越利于重构。自动的对象/关系持久化充分减少了代码行。</p><p>Hibernate更易于维护还有其它原因，在手工编码的持久化系统中，关系表示法和对象模型实现领域之间存在一种必然的压力。改变一个，通常都要改变另一个，并且一个表示法设计通常需要妥协以便适应另一个的存在。ORM提供了两个模型之间的一个缓冲，允许面向对象在Java方面进行更优雅的利用，并且每个模型的微小变化都不会传递到另一个模型。</p><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>手工编码的持久化和自动的持久化相比总是可以一样快，并且经常更快。这是事实。但是在实际开发中，会受到时间和预算的约束。</p><p>在有限时间的项目中，手工编码的持久化通常允许你进行一些优化；Hibernate始终允许使用更多的优化。</p><p>自动的持久化能够大大提高开发人员的工作效率，使得开发人员能够花更多的时间对其它少数瓶颈进行手工优化。</p><p>实现ORM框架的人，可能在性能优化方面比我们做的更好。</p><h4 id="供应商独立性"><a href="#供应商独立性" class="headerlink" title="供应商独立性"></a>供应商独立性</h4><p>ORM从底层的SQL数据库和SQL方言中把应用程序抽象出来。如果这个工具支持不同的数据库，这会给我们的应用程序带来一定程度的可移植性。可以帮我们减少一些被供应商锁定的风险。</p><p>数据库的独立性使得我们可以在开发时选择一些轻量级的数据库，在部署时，将实际的产品部署在不同的数据库上。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Hibernate是一个ORM框架，这里主要介绍了一下ORM的必要性以及ORM的一些相关概念&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hibernate" scheme="http://www.huangxiang666.com/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://www.huangxiang666.com/tags/Hibernate/"/>
    
      <category term="ORM框架" scheme="http://www.huangxiang666.com/tags/ORM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="javaweb" scheme="http://www.huangxiang666.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate教程（一）---Hibernate简介</title>
    <link href="http://www.huangxiang666.com/2017-03-17/Hibernate%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.huangxiang666.com/2017-03-17/Hibernate教程（一）.html</id>
    <published>2017-03-17T03:14:02.000Z</published>
    <updated>2017-03-17T09:44:28.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate简介"><a href="#Hibernate简介" class="headerlink" title="Hibernate简介"></a>Hibernate简介</h2><ul><li><p>Hibernate是一个Java对象映射关系的解决方案的ORM（Object-Relational Mapping）框架，是一个开源持久框架，由<code>Gavin King</code>于2001年创建。为Java应用提供强大的、高性能对象持久化和查询服务。</p></li><li><p>Hibernate将Java类映射到数据库表，将Java数据类型映射到SQL数据类型，减轻了开发人员95%的数据持久性相关的编程任务。</p></li><li><p>Hibernate位于传统的Java对象和数据库服务器之间，基于适当的<code>O/R机制和模式</code>来处理持久化这些对象的所有工作。</p></li></ul><p><img src="http://7xt7l1.com1.z0.glb.clouddn.com/hibernate_position.jpg" alt="Hibernate-position"></p><h3 id="Hibernate的优势"><a href="#Hibernate的优势" class="headerlink" title="Hibernate的优势"></a>Hibernate的优势</h3><ul><li>Hibernate通过XML配置文件将Java类映射到数据库表，而不需要编写任何代码。</li><li>提供简单的API,用于直接存储和检索数据库中的Java对象。</li><li>如果数据库或任何表中有更改，只需要修改XML文件。</li><li>提取我们不熟悉的SQL类型，并提供我们熟悉的Java对象。</li><li>Hibernate不需要应用府服务器来操作。</li><li>操作复杂关联的数据库对象。</li><li>使用智能抓取策略简化数据库操作。</li><li>提供简单的数据查询。</li></ul><h3 id="Hibernate支持的数据库"><a href="#Hibernate支持的数据库" class="headerlink" title="Hibernate支持的数据库"></a>Hibernate支持的数据库</h3><p>Hibernate几乎支持所有的关系型数据库管理系统(RDBMS),支持的数据库如下所示：</p><ul><li>HSQL Database Engine</li><li>DB2/NT</li><li>MySQL</li><li>PostgreSQL</li><li>FrontBase</li><li>Oracle</li><li>Microsoft SQL Server Database</li><li>Sybase SQL Server</li><li>nformix Dynamic Server</li></ul><h3 id="Hibernate架构"><a href="#Hibernate架构" class="headerlink" title="Hibernate架构"></a>Hibernate架构</h3><p>Hibernate架构是分层的，所以我们不需要知道底层的API，Hibernate利用数据库和配置数据向我们的应用程序提供持久性服务（和持久性对象）。</p><p>下图是Hibernate应用结构体系简要视图：<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/hibernate_high_level.jpg" alt="Hibernate-hign-level"></p><p>下图是Hibernate应用结构体系详细视图，包含了几个重要的核心类：<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/hibernate_architecture.jpg" alt="Hibernate架构"></p><ul><li>Hibernate使用各种现有的Java API，如<code>JDBC</code>,<code>JTA</code>,<code>JNDI</code>。<blockquote><p><code>JDBC</code>提供了关系数据库通用的功能抽象层，所有具有<code>JDBC</code>驱动程序的数据库都被<code>Hibernate</code>支持。<br><code>JTA</code>和<code>JNDI</code>允许<code>Hibernate</code>与J2EE服务器集成。</p></blockquote></li></ul><h2 id="Hibernate应用结构体系主要类对象"><a href="#Hibernate应用结构体系主要类对象" class="headerlink" title="Hibernate应用结构体系主要类对象"></a>Hibernate应用结构体系主要类对象</h2><h3 id="Configuration-Object"><a href="#Configuration-Object" class="headerlink" title="Configuration Object"></a>Configuration Object</h3><p><code>Configuration Object</code>是我们在Hibernate应用程序中创建的第一个Hibernate对象，通常在应用程序初始化时且只创建一次。它是Hibernate所需要的配置和属性文件。Configuration对象提供两个关键组件：</p><ul><li><strong>Database Connection:</strong>通过Hibernate支持的一个或多个配置文件来处理。<code>hibernate.properties</code>,<code>hibernate.cfg.xml</code>。</li><li><strong>Class Mapping Setup:</strong>这个组件用于Java类和数据库表之间创建连接。</li></ul><h3 id="SessionFactory-Object"><a href="#SessionFactory-Object" class="headerlink" title="SessionFactory Object"></a>SessionFactory Object</h3><p><code>Configuration Object</code>用于创建一个<code>SessionFactory Obejct</code>，该对象使用提供的配置文件为应用程序配置<code>Hibernate</code>，并允许实例化一个<code>Session</code>对象。<code>SessionFactory</code>是<code>线程安全对象</code>,供应用程序的所有线程使用。</p><p><code>SessionFactory</code>是重量级对象。因此通常在应用程序启动期间创建并保留供以后使用。</p><p>每个数据库都需要使用一个单独的配置文件创建一个<code>SessionFactory</code>对象。如果使用多个数据库，则必须创建多个<code>SessionFactory</code>对象。</p><h3 id="Session-会话-Object"><a href="#Session-会话-Object" class="headerlink" title="Session(会话) Object"></a>Session(会话) Object</h3><p><code>Session（会话）</code>用于获取与数据库的物理连接，Session对象是轻量级的，并且是每当需要与数据库进行交互时才会被实例化。持久化对象通过Session对象进行保存和检索。</p><p>Session对象不应该长时间保持打开，因为他们通常不是线程安全的，所以应该根据业务需求创建和销毁它们。</p><h3 id="Transaction（事务）-Object"><a href="#Transaction（事务）-Object" class="headerlink" title="Transaction（事务） Object"></a>Transaction（事务） Object</h3><p>事务<code>Transaction</code>代表与数据库的工作单元，大多数关系型数据库都支持事务功能。Hibernate中的事务由底层事务管理器和事务（来自JDBC和JTA）处理。</p><p>这是一个可选对象，Hibernate应用程序可以选择不使用此接口，而选择在自己的应用程序代码中管理事务。</p><h3 id="Query-Object"><a href="#Query-Object" class="headerlink" title="Query Object"></a>Query Object</h3><p>查询<code>Query</code>对象使用SQL或者Hibernate查询语言(<code>Hibernate Query Language,HQL</code>)字符串从数据库检索数据并创建对象。Query实例用于绑定查询参数，限制查询返回的结果数量，最后执行查询。</p><h3 id="Criteria-Object"><a href="#Criteria-Object" class="headerlink" title="Criteria Object"></a>Criteria Object</h3><p>条件对象用于创建和执行面向对象的标准查询以检索对象。</p><h2 id="Hibernate-环境配置"><a href="#Hibernate-环境配置" class="headerlink" title="Hibernate 环境配置"></a>Hibernate 环境配置</h2><p>该章主要介绍如何安装Hibernate以及其它相关包来为Hibernate应用程序准备一个开发环境。本文将使用Mysql数据库来演示Hibernate实例。</p><h3 id="Hibernate下载"><a href="#Hibernate下载" class="headerlink" title="Hibernate下载"></a>Hibernate下载</h3><ul><li>在windows上下载<code>.zip</code>文件，在Unix上下载<code>.tz</code>文件。</li><li>从<a href="http://www.hibernate.org/downloads" title="hibernate下载链接" target="_blank" rel="noopener">http://www.hibernate.org/downloads</a>下载最新版的Hibernate。</li><li>下载完成之后进行解压。</li></ul><h3 id="安装Hibernate"><a href="#安装Hibernate" class="headerlink" title="安装Hibernate"></a>安装Hibernate</h3><p>下载完Hibernate之后，只需要执行以下两个简单的步骤即可。请确保正确的配置了<code>CLASSPATH</code>环境变量，否则在编译应用程序时会出现问题。</p><h3 id="Hibernate的依赖包"><a href="#Hibernate的依赖包" class="headerlink" title="Hibernate的依赖包"></a>Hibernate的依赖包</h3><table><thead><tr><th>S.N.</th><th>Packages/Libraries</th></tr></thead><tbody><tr><td>1</td><td>dom4j - XML parsing www.dom4j.org/</td></tr><tr><td>2</td><td>Xalan - XSLT Processor <a href="http://xml.apache.org/xalan-j/" target="_blank" rel="noopener">http://xml.apache.org/xalan-j/</a></td></tr><tr><td>3</td><td>Xerces - The Xerces Java Parser <a href="http://xml.apache.org/xerces-j/" target="_blank" rel="noopener">http://xml.apache.org/xerces-j/</a></td></tr><tr><td>4</td><td>cglib - Appropriate changes to Java classes at runtime <a href="http://cglib.sourceforge.net/" target="_blank" rel="noopener">http://cglib.sourceforge.net/</a></td></tr><tr><td>5</td><td>log4j - Logging Faremwork <a href="http://logging.apache.org/log4j" target="_blank" rel="noopener">http://logging.apache.org/log4j</a></td></tr><tr><td>6</td><td>Commons - Logging, Email etc. <a href="http://jakarta.apache.org/commons" target="_blank" rel="noopener">http://jakarta.apache.org/commons</a></td></tr><tr><td>7</td><td>SLF4J - Logging Facade for Java <a href="http://www.slf4j.org" target="_blank" rel="noopener">http://www.slf4j.org</a></td></tr></tbody></table><h3 id="Hibernate配置"><a href="#Hibernate配置" class="headerlink" title="Hibernate配置"></a>Hibernate配置</h3><p>Hibernate需要提前知道在哪里可以找到定义的Java类和数据库表相关联的映射信息。Hibernate还需要一组与数据库和其它相关参数相关的配置设置。所有这些信息通常作为标准java属性文件<code>hibernate.properties</code>或者名为<code>hibernate.cfg.xml</code>的XML文件提供。</p><h3 id="Hibernate属性"><a href="#Hibernate属性" class="headerlink" title="Hibernate属性"></a>Hibernate属性</h3><p>以下是在独立情况下为一个数据库配置所需要的重要属性列表：</p><table><thead><tr><th>S.N.</th><th>Properties and Description</th></tr></thead><tbody><tr><td>1</td><td><code>hibernate.dialect</code>:此属性使Hibernate为选定的数据库生成适当的SQL</td></tr><tr><td>2</td><td><code>hibernate.connection.driver_class</code>:JDBC驱动程序类</td></tr><tr><td>3</td><td><code>hibernate.connection.url</code>:数据库实例的JDBC URL</td></tr><tr><td>4</td><td><code>hibernate.connection.username</code>:数据库用户名</td></tr><tr><td>5</td><td><code>hibernate.connection.password</code>:数据库密码</td></tr><tr><td>6</td><td><code>hibernate.connection.pool_size</code>:限制在Hibernate数据库连接池中的等待连接数</td></tr><tr><td>7</td><td><code>hibernate.connection.autocommit</code>:允许JDBC连接自动提交</td></tr></tbody></table><p>如果随着应用服务器和JNDI使用同一个服务器，则还需要配置以下属性：</p><table><thead><tr><th>S.N.</th><th>Properties and Description</th></tr></thead><tbody><tr><td>1</td><td><code>hibernate.connection.datasource</code>:在应用服务器中定义的JNDI名称</td></tr><tr><td>2</td><td><code>hibernate.jndi.class</code>:JNDI的InitialContext类</td></tr><tr><td>3</td><td><code>hibernate.jndi.&lt;JNDIpropertyname&gt;</code>:</td></tr><tr><td>4</td><td><code>hibernate.jndi.url</code>:提供JNDI的url</td></tr><tr><td>5</td><td><code>hibernate.connection.username</code>:数据库用户名</td></tr><tr><td>6</td><td><code>hibernate.connection.password</code>:数据库密码</td></tr></tbody></table><h3 id="Hibernate和Mysql数据库"><a href="#Hibernate和Mysql数据库" class="headerlink" title="Hibernate和Mysql数据库"></a>Hibernate和Mysql数据库</h3><p><code>MySQL</code>是目前最流行的开源数据库系统之一，下面我们创建一个<code>hibernate.cfg.xml</code>配置文件，并将其放置于应用程序类路径的根目录下，必须确保已经安装<code>MySQL</code> 并保证已经保证创建了可用的测试数据库。<br>XML配置文件必须符合Hibernate 3 Configuration DTD，该文件可从<a href="http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd获得。" target="_blank" rel="noopener">http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd获得。</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration SYSTEM </span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">      org.hibernate.dialect.MySQLDialect</span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">      com.mysql.jdbc.Driver</span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Assume test is the database name --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">      jdbc:mysql://localhost/test</span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span></span><br><span class="line">      root</span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span></span><br><span class="line">      root123</span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- List of XML mapping files --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"Employee.hbm.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>下表是各类数据库的属性类型(<code>Dialect Property</code>)列表：</p><table><thead><tr><th>Database</th><th>Dialect Property</th></tr></thead><tbody><tr><td>DB2</td><td>org.hibernate.dialect.DB2Dialect</td></tr><tr><td>HSQLDB</td><td>org.hibernate.dialect.HSQLDialect</td></tr><tr><td>HypersonicSQL</td><td>org.hibernate.dialect.HSQLDialect</td></tr><tr><td>Informix</td><td>org.hibernate.dialect.InformixDialect</td></tr><tr><td>Ingres</td><td>org.hibernate.dialect.IngresDialect</td></tr><tr><td>Interbase</td><td>org.hibernate.dialect.InterbaseDialect</td></tr><tr><td>Microsoft SQL Server 2000</td><td>org.hibernate.dialect.SQLServerDialect</td></tr><tr><td>Microsoft SQL Server 2005</td><td>org.hibernate.dialect.SQLServer2005Dialect</td></tr><tr><td>Microsoft SQL Server 2008</td><td>org.hibernate.dialect.SQLServer2008Dialect</td></tr><tr><td>MySQL</td><td>org.hibernate.dialect.MySQLDialect</td></tr><tr><td>Oracle (any version)</td><td>org.hibernate.dialect.OracleDialect</td></tr><tr><td>Oracle 11g</td><td>org.hibernate.dialect.Oracle10gDialect</td></tr><tr><td>Oracle 10g</td><td>org.hibernate.dialect.Oracle10gDialect</td></tr><tr><td>Oracle 9i</td><td>org.hibernate.dialect.Oracle9iDialect</td></tr><tr><td>PostgreSQL</td><td>org.hibernate.dialect.PostgreSQLDialect</td></tr><tr><td>Progress</td><td>org.hibernate.dialect.ProgressDialect</td></tr><tr><td>SAP DB</td><td>org.hibernate.dialect.SAPDBDialect</td></tr><tr><td>Sybase</td><td>org.hibernate.dialect.SybaseDialect</td></tr><tr><td>Sybase Anywhere</td><td>org.hibernate.dialect.SybaseAnywhereDialect</td></tr></tbody></table><h2 id="Hibernate实例"><a href="#Hibernate实例" class="headerlink" title="Hibernate实例"></a>Hibernate实例</h2><h3 id="创建POJO类"><a href="#创建POJO类" class="headerlink" title="创建POJO类"></a>创建POJO类</h3><ul><li>首先，我们创建<code>Java POJO类</code>，这取决于将被持久化到数据库的应用程序，生成<code>getXXX()</code>和<code>setXXX()</code>方法，使其成为<code>JavaBeans</code>兼容类。</li><li>POJO（java普通对象）是一种java对象，它不扩展或实现一些EJB框架分别需要的一些专门的类或接口。所有正常的Java对象都是POJO。</li><li>当你设计一个要被Hibernate持久化的类时，提供符合JavaBeans的代码以及一个在Employee类中像id属性一样用作索引的属性很重要。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String firstName; </span><br><span class="line">   <span class="keyword">private</span> String lastName;   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> salary;  </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String fname, String lname, <span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = fname;</span><br><span class="line">      <span class="keyword">this</span>.lastName = lname;</span><br><span class="line">      <span class="keyword">this</span>.salary = salary;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">( <span class="keyword">int</span> id )</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">( String first_name )</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = first_name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">( String last_name )</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.lastName = last_name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> salary;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">( <span class="keyword">int</span> salary )</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.salary = salary;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h3><p>第二步，我们需要在数据库中创建一张表，将表对应我们需要持久化的每一个对象，根据上面的java类我们创建下面这样一个表“</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> EMPLOYEE (</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">   first_name <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">   last_name  <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">   salary     <span class="built_in">INT</span>  <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="创建配置映射文件"><a href="#创建配置映射文件" class="headerlink" title="创建配置映射文件"></a>创建配置映射文件</h3><p>接下来我们需要创建一个配置文件，说明Hibernate如何将定义的类映射至数据库表。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC </span></span><br><span class="line"><span class="meta"> "-//Hibernate/Hibernate Mapping DTD//EN"</span></span><br><span class="line"><span class="meta"> "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Employee"</span> <span class="attr">table</span>=<span class="string">"EMPLOYEE"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">attribute</span>=<span class="string">"class-description"</span>&gt;</span></span><br><span class="line">         This class contains the employee detail. </span><br><span class="line">      <span class="tag">&lt;/<span class="name">meta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"firstName"</span> <span class="attr">column</span>=<span class="string">"first_name"</span> <span class="attr">type</span>=<span class="string">"string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">type</span>=<span class="string">"string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"salary"</span> <span class="attr">column</span>=<span class="string">"salary"</span> <span class="attr">type</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们应该把映射文件保存为<code>&lt;classname&gt;.hbm.xml</code>格式的文件。上面文件保存为<code>Employee.hbm.xml</code>。</p><ul><li>映射文件是一个XML格式的文档。<code>&lt;hibernate-mapping&gt;</code>作为包含所有<code>&lt;class&gt;</code>元素的根元素。</li><li><code>&lt;class&gt;</code>元素用于定义从java类到数据库表的特定映射。<code>java类名称</code>使用使用类元素的<code>name属性</code>指定，并且使用<code>table</code>属性指定数据库表名称。</li><li><code>&lt;meta&gt;</code>元素是可选元素，用于创建类描述。</li><li><code>&lt;id&gt;</code>是将类中的唯一ID元素映射到数据库表的主键。id元素中的name属性引用类中的属性，cloumn属性引用数据库表中的列。type属性保存hibernate映射类型，此映射类型将从Java转换成SQL数据类型。</li><li>id元素中的<code>&lt;generator&gt;</code>属性用于自动生成主键值，设置class的属性值为<code>native</code>，让hibernate选择<code>identity</code>，<code>sequence</code>,<code>hilo</code>算法来创建主键，这取决于底层数据库的能力。</li><li><code>&lt;property&gt;</code>元素用于将Java类属性映射到数据库表中的列。元素的name属性引用类中的属性，cloumn属性引用数据库表中的列。type属性保存hibernate映射类型，此映射类型将从Java类型转换成SQL数据类型。</li></ul><h3 id="创建应用类-java-class"><a href="#创建应用类-java-class" class="headerlink" title="创建应用类(java class)"></a>创建应用类(java class)</h3><p>完成了以上步骤后，我们来创建一个应用文件来测试一下我们的配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List; </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.hibernate.HibernateException; </span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session; </span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManageEmployee</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         factory = <span class="keyword">new</span> Configuration().configure().buildSessionFactory();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Throwable ex) &#123; </span><br><span class="line">         System.err.println(<span class="string">"Failed to create sessionFactory object."</span> + ex);</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(ex); </span><br><span class="line">      &#125;</span><br><span class="line">      ManageEmployee ME = <span class="keyword">new</span> ManageEmployee();</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 添加一些employee对象到数据库表中*/</span></span><br><span class="line">      Integer empID1 = ME.addEmployee(<span class="string">"Zara"</span>, <span class="string">"Ali"</span>, <span class="number">1000</span>);</span><br><span class="line">      Integer empID2 = ME.addEmployee(<span class="string">"Daisy"</span>, <span class="string">"Das"</span>, <span class="number">5000</span>);</span><br><span class="line">      Integer empID3 = ME.addEmployee(<span class="string">"John"</span>, <span class="string">"Paul"</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 列出所有employee对象 */</span></span><br><span class="line">      ME.listEmployees();</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 修改 */</span></span><br><span class="line">      ME.updateEmployee(empID1, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 从数据库中删除 */</span></span><br><span class="line">      ME.deleteEmployee(empID2);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 列出所有对象s */</span></span><br><span class="line">      ME.listEmployees();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 向数据库中添加employee对象的方法 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">addEmployee</span><span class="params">(String fname, String lname, <span class="keyword">int</span> salary)</span></span>&#123;</span><br><span class="line">      Session session = factory.openSession();</span><br><span class="line">      Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">      Integer employeeID = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         tx = session.beginTransaction();</span><br><span class="line">         Employee employee = <span class="keyword">new</span> Employee(fname, lname, salary);</span><br><span class="line">         employeeID = (Integer) session.save(employee); </span><br><span class="line">         tx.commit();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">         <span class="keyword">if</span> (tx!=<span class="keyword">null</span>) tx.rollback();</span><br><span class="line">         e.printStackTrace(); </span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">         session.close(); </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> employeeID;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 列出所有employee对象的方法 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listEmployees</span><span class="params">( )</span></span>&#123;</span><br><span class="line">      Session session = factory.openSession();</span><br><span class="line">      Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         tx = session.beginTransaction();</span><br><span class="line">         List employees = session.createQuery(<span class="string">"FROM Employee"</span>).list(); </span><br><span class="line">         <span class="keyword">for</span> (Iterator iterator = </span><br><span class="line">                           employees.iterator(); iterator.hasNext();)&#123;</span><br><span class="line">            Employee employee = (Employee) iterator.next(); </span><br><span class="line">            System.out.print(<span class="string">"First Name: "</span> + employee.getFirstName()); </span><br><span class="line">            System.out.print(<span class="string">"  Last Name: "</span> + employee.getLastName()); </span><br><span class="line">            System.out.println(<span class="string">"  Salary: "</span> + employee.getSalary()); </span><br><span class="line">         &#125;</span><br><span class="line">         tx.commit();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">         <span class="keyword">if</span> (tx!=<span class="keyword">null</span>) tx.rollback();</span><br><span class="line">         e.printStackTrace(); </span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">         session.close(); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 修改employee对象的方法 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmployee</span><span class="params">(Integer EmployeeID, <span class="keyword">int</span> salary )</span></span>&#123;</span><br><span class="line">      Session session = factory.openSession();</span><br><span class="line">      Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         tx = session.beginTransaction();</span><br><span class="line">         Employee employee = </span><br><span class="line">                    (Employee)session.get(Employee.class, EmployeeID); </span><br><span class="line">         employee.setSalary( salary );</span><br><span class="line"> session.update(employee); </span><br><span class="line">         tx.commit();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">         <span class="keyword">if</span> (tx!=<span class="keyword">null</span>) tx.rollback();</span><br><span class="line">         e.printStackTrace(); </span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">         session.close(); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 删除employee对象的方法 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(Integer EmployeeID)</span></span>&#123;</span><br><span class="line">      Session session = factory.openSession();</span><br><span class="line">      Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         tx = session.beginTransaction();</span><br><span class="line">         Employee employee = </span><br><span class="line">                   (Employee)session.get(Employee.class, EmployeeID); </span><br><span class="line">         session.delete(employee); </span><br><span class="line">         tx.commit();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">         <span class="keyword">if</span> (tx!=<span class="keyword">null</span>) tx.rollback();</span><br><span class="line">         e.printStackTrace(); </span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">         session.close(); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译和执行"><a href="#编译和执行" class="headerlink" title="编译和执行"></a>编译和执行</h3><p>编译和执行的步骤（请确保正确配置了环境变量）：</p><ul><li>创建<code>hibernate.cfg.xml</code>配置文件。</li><li>创建<code>Employee.hbm.xml</code>映射文件。</li><li>创建<code>Employee.java</code>文件，并编译它。</li><li>创建如上所示的<code>ManageEmployee.java</code>文件，并执行编译。</li><li>执行<code>ManageEmployee.class</code>文件，运行程序。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Hibernate是一个java对象映射关系的解决方案的ORM（Object-Relational Mapping）框架，是一个开源持久框架，由`Gavin King`于2001年创建。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hibernate" scheme="http://www.huangxiang666.com/categories/Hibernate/"/>
    
    
      <category term="ORM框架" scheme="http://www.huangxiang666.com/tags/ORM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="javaweb" scheme="http://www.huangxiang666.com/tags/javaweb/"/>
    
      <category term="hibernate" scheme="http://www.huangxiang666.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>《Java解惑》读书笔记</title>
    <link href="http://www.huangxiang666.com/2017-03-06/%E3%80%8AJava%E8%A7%A3%E6%83%91%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>http://www.huangxiang666.com/2017-03-06/《Java解惑》读书笔记.html</id>
    <published>2017-03-06T08:50:16.000Z</published>
    <updated>2017-03-17T09:47:33.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表达式之谜"><a href="#表达式之谜" class="headerlink" title="表达式之谜"></a>表达式之谜</h2><h3 id="奇数性"><a href="#奇数性" class="headerlink" title="奇数性"></a>奇数性</h3><p>奇数：被2整除余1的数。表达式i%2是计算i除以2时所产生的余数。这个表达式其实是错误的。<br>在所有的int数值中，有一半的值为负数，当值为负数时，无论该值为奇数还是偶数，结果都会返回false。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hx.test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(isOdd(-<span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOdd</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">//return i % 2 == 1;  // 这个表达式是错误的。</span></span><br><span class="line"><span class="comment">//return i % 2 != 0; // 正确</span></span><br><span class="line"><span class="keyword">return</span> (i &amp; <span class="number">1</span>) != <span class="number">0</span>; <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="找零时刻"><a href="#找零时刻" class="headerlink" title="找零时刻"></a>找零时刻</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hx.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="number">2.00</span> - <span class="number">1.10</span>);  <span class="comment">// 输出结果0.8999999999999999</span></span><br><span class="line">System.out.println((<span class="number">200</span>-<span class="number">110</span>)+<span class="string">"cents"</span>); <span class="comment">//输出结果 90 cents</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> BigDecimal(<span class="string">"2.00"</span>).subtract(<span class="keyword">new</span> BigDecimal(<span class="string">"1.10"</span>))); <span class="comment">//输出结果0.9</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要使用精确数值的地方，要避免使用<code>float</code>和<code>double</code>，对于货币计算，要使用<code>int</code>,<code>long</code>,<code>BigDecimal</code>。</p><h3 id="长整除"><a href="#长整除" class="headerlink" title="长整除"></a>长整除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hx.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> MICROS_PRE_DAY = <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>*<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> MILLS_PRE_DAY = <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//final long MICROS_PRE_DAY = 24L*60*60*1000*1000;</span></span><br><span class="line"><span class="comment">//final long MILLS_PRE_DAY = 24L*60*60*1000;</span></span><br><span class="line"></span><br><span class="line">System.out.println(MICROS_PRE_DAY/MILLS_PRE_DAY); <span class="comment">// 为什么结果会打印5？？？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当操作很大的数字时，千万要提防溢出。即便用来保存结果的变量足够大，也并不意味着要产生结果的计算具有正确的类型。当拿不准的时候，就使用<code>long</code>运算来执行整个计算。</p><h3 id="十六进制的趣事"><a href="#十六进制的趣事" class="headerlink" title="十六进制的趣事"></a>十六进制的趣事</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hx.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Long.toHexString(<span class="number">0x100000000L</span> + <span class="number">0xcafebabe</span>));  <span class="comment">// cafebabe</span></span><br><span class="line">System.out.println(Long.toHexString(<span class="number">0x100000000L</span> + <span class="number">0xcafebabeL</span>)); <span class="comment">// 1cafebabe</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>混合类型的计算可能产生混淆，尤其需要注意的是十六进制和八进制字面常量无需显式的减号符号就可以表示负的数值，为了避免这种窘境，通常最好避免混合类型的计算。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;本片文章主要记录《Java解惑》的一些收获。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java解惑" scheme="http://www.huangxiang666.com/categories/Java%E8%A7%A3%E6%83%91/"/>
    
    
      <category term="java解惑" scheme="http://www.huangxiang666.com/tags/java%E8%A7%A3%E6%83%91/"/>
    
      <category term="表达式" scheme="http://www.huangxiang666.com/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>windows下的cmd神器:Cmder介绍及其设置</title>
    <link href="http://www.huangxiang666.com/2017-02-28/windows%E4%B8%8B%E7%9A%84cmd%E7%A5%9E%E5%99%A8-Cmder.html"/>
    <id>http://www.huangxiang666.com/2017-02-28/windows下的cmd神器-Cmder.html</id>
    <published>2017-02-28T08:22:22.000Z</published>
    <updated>2017-02-28T08:22:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xt7l1.com1.z0.glb.clouddn.com/%E8%BD%AF%E4%BB%B6%E4%B8%BB%E7%95%8C%E9%9D%A2.jpg" alt="Cmder主界面"></p><a id="more"></a><h2 id="Cmder的安装"><a href="#Cmder的安装" class="headerlink" title="Cmder的安装"></a>Cmder的安装</h2><p>cmder官网： <a href="http://cmder.net/" title="官网" target="_blank" rel="noopener">http://cmder.net/</a><br>Github：<a href="https://github.com/cmderdev/cmder" title="github地址" target="_blank" rel="noopener">https://github.com/cmderdev/cmder</a></p><ol><li><p>官网安装<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/cmder%E5%AE%98%E7%BD%91.jpg" alt="Cmder官网截图"><br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/cmder%E5%AE%98%E7%BD%91%E6%88%AA%E5%9B%BEdownload.jpg" alt="cmder官网截图download"><br>在官网上,我们可以看到<code>Download</code>模块，分为min版和full版，两者的区别在于：full版集成了<code>msysgit</code>工具，是<code>Git for Windows</code>的标准配置，除了git本身这个命令之外，里面还有大量的linux命令，比如 grep, curl(没有 wget)； 像vim, grep, tar, unzip, ssh, ls, bash, perl 对于爱折腾的Coder更是痛点需求。</p><ul><li>将下载的压缩包解压到你想放置的目录。</li><li>点击Cmder.exe即可运行。</li></ul></li></ol><h2 id="Cmder配置及相关设置"><a href="#Cmder配置及相关设置" class="headerlink" title="Cmder配置及相关设置"></a>Cmder配置及相关设置</h2><h3 id="乱码和文字重叠"><a href="#乱码和文字重叠" class="headerlink" title="乱码和文字重叠"></a>乱码和文字重叠</h3><p>当我们使用<code>ls</code>命令查看文件目录时，发现，中文被显示成了一些奇怪的乱码，将以下几行代码配置在<code>cmder/config/user-aliases</code>下即可解决问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l=ls --show-control-chars</span><br><span class="line">la=ls -aF --show-control-chars</span><br><span class="line">ll=ls -alF --show-control-chars</span><br><span class="line">ls=ls --show-control-chars -F</span><br></pre></td></tr></table></figure></p><p>如果进行了以上配置还存在乱码问题时，还能尝试进行如下配置：<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/cmder%E7%9A%84win+alt+p%E7%95%8C%E9%9D%A2.jpg" alt="cmder乱码设置"></p><h3 id="启动Cmder"><a href="#启动Cmder" class="headerlink" title="启动Cmder"></a>启动Cmder</h3><p>前文已经说过，Cmder无需安装，解压即可运行。<code>Cmder</code>点击<code>Cmder.exe</code>即可运行，显然，这样打开是非常不方便的，所以，我们可以进行如下配置：</p><ol><li><p>将cmder添加入环境变量<br>将<code>cmder.exe</code>所在的目录添加至系统环境变量。添加完之后，使用<code>win+r</code>输入<code>cmder</code>即可运行<code>Cmder</code>。<br>右键点击<code>我的电脑---&gt;属性</code>,然后如下图所示进行配置即可：<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE.jpg" alt="cmder环境变量设置"></p></li><li><p>添加cmser至右键菜单<br>能不能将cmder添加到右键，让我们可以在任意文件目录下打开<code>cmder</code>呢？如果能这样使用那么简直是不能太赞了！！答案是完全可以的，因为在上一步骤我们已经将<code>cmder</code>加入了环境变量，所以我们只需要进行如下配置即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 以系统管理员权限打开cmd窗口，输入以下代码，回车即可。</span><br><span class="line">Cmder.exe /REGISTER ALL</span><br></pre></td></tr></table></figure></li></ol><p><img src="http://7xt7l1.com1.z0.glb.clouddn.com/cmder%20here.jpg" alt="cmder here"></p><h3 id="默认开启设置"><a href="#默认开启设置" class="headerlink" title="默认开启设置"></a>默认开启设置</h3><p>作为强大的存在，必然支持私人定制。输入<code>win + alt + p</code> 或者 在底部右击点击 <code>settings</code>, 进入设置页面；可以根据自己的所需进行各种配置(字体，皮肤等等等等)。</p><p>目前游走在前端，Gulp已离不开，<code>Cmder+PowerShell</code>这个组合无疑是运行<code>gulp</code>的利器。如下图所示，可以设置<code>PowerShell</code>作为默认开启的选项；也可以更改默认开启是所在目录。<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/cmder%20powershell.jpg" alt="cmder powershell"></p><h2 id="Cmder常用功能介绍"><a href="#Cmder常用功能介绍" class="headerlink" title="Cmder常用功能介绍"></a>Cmder常用功能介绍</h2><p>Cmder功能非常强大，也有许多功能：</p><ol><li><p>Cmder常用快捷键</p><ul><li><code>Tab</code>：自动路径补全</li><li><code>ctrl+T</code>:建立新页签</li><li><code>ctrl+W</code>：关闭页签</li><li><code>ctrl+tab</code>：切换页签</li><li><code>alt_f4</code>:关闭所有页签</li><li><code>alt+shift+1</code>:开启cmd.exe</li><li><code>alt+shift+2</code>:开启powershell.exe</li><li><code>alt+shift+3</code>:开启powershell.exe（系统管理员权限）</li><li><code>ctrl+1</code>:快速切换到第一个页签</li><li><code>ctrl+n</code>:快速切换到第n个页签</li><li><code>alt+enter</code>:切换到全屏状态</li><li><code>ctrl+r</code>:历史命令搜索</li></ul></li><li><p>可在视窗内搜寻画面上曾经出现过的任意字</p></li><li>新增页签按钮，可透过滑鼠新增页签</li><li>切换页签按钮，可透过滑鼠切换页签</li><li>锁定视窗，让视窗无法再输入</li><li>切换视窗是否提供卷轴功能，启动时可查询之前显示过的内容</li><li>按下滑鼠左键可开启系统菜单，滑鼠右键可开启工具选项视窗，<code>win+alt+p</code>开启工具选项视窗。</li></ol><h2 id="cmder元件组成"><a href="#cmder元件组成" class="headerlink" title="cmder元件组成"></a>cmder元件组成</h2><p><code>Cmder</code>集成了多套软体，其中最重要的是<code>msysgit</code>、<code>ConEmu</code>、<code>Clink</code>。</p><ul><li>msysgit除了提供git for windows相关工具之外，还提供了多套Unix/linux环境下常用的指令工具，例如：less、ls、tar、grep等。</li><li>ConEmu体验不如cmder</li><li>Clink将GNU Readline 函式库整合进原生的Windows 命令提示字元视窗，提供命令列模式下强大的编辑与输入能力，这也是用了cmder 之后会这么像在Linux 环境下使用的感觉。</li></ul><h3 id="Chocolatey软件包管理系统"><a href="#Chocolatey软件包管理系统" class="headerlink" title="Chocolatey软件包管理系统"></a>Chocolatey软件包管理系统</h3><p>在 Linux 下，大家喜欢用<code>apt-get(mac下用brew)</code>来安装应用程序，如今在 windows 下，大家可以使用<code>Chocolatey</code>来快速下载搭建一个开发环境。<code>Chocolatey</code>的哲学就是完全用命令行来安装应用程序， 它更像一个包管理工具（背后使用<code>Nuget</code>）<br>另外需要说明的是，<code>Chocolatey</code>只是把官方下载路径封装到了<code>Chocolatey</code>中，所以下载源都是其官方路径，所以下载的一定是合法的，但是如果原软件是需要 Licence 注册的话，那么<code>Chocolatey</code>下载安装好的软件还是需要你去购买注册。不过<code>Chocolatey</code>一般还是会选用免费 Licence 可用的软件。</p><p>安装chocolatey , 运行如下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@powershell -NoProfile -ExecutionPolicy unrestricted -Command &quot;iex ((new-object net.webclient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin</span><br></pre></td></tr></table></figure></p><p>安装软件命令<code>choco install softwareName</code>, 短写是<code>cinst softwareName</code><br>可安装的应用程序，可以参见其 Package列表<br>以下是window下开发常用的开发环境应用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">choco install autohotkey.portable    #安装 AutoHotkey (Portable)</span><br><span class="line">choco install nodejs.install  #安装 node</span><br><span class="line">choco install git.install     #安装 git</span><br><span class="line">choco install ruby            #安装 ruby</span><br><span class="line">choco install python          #安装 python</span><br><span class="line">choco install jdk8            #安装 JDK8</span><br><span class="line">choco install googlechrome    #安装 Chrome</span><br><span class="line">choco install google-chrome-x64 #Google Chrome (64-bit only)</span><br><span class="line">choco install firefox         #安装 firefox</span><br><span class="line">choco install notepadplusplus.install #安装 notepad++</span><br><span class="line">choco install Atom                    #安装 Atom</span><br><span class="line">choco install SublimeText3            #安装 SublimeText3</span><br></pre></td></tr></table></figure></p><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><ul><li><code>Cmder</code>还增加了<code>alias</code>功能;他让你用短短的指令执行一些常见但指令超长又难以记忆的语法;比如 <code>ls</code> <code>cls</code>等等；在其控制台输入<code>alias</code>可以查看。</li><li>主控台文字自动放大缩小功能，你只要按下Ctrl+滑鼠滚轮就可以办到;果你用支援两点触控的笔电，也可以在触控板上用两指放大的手势调整文字大小。还有：up，向上翻历史命令;</li><li>Cmder有极为简单的复制粘贴操作。Ctr+V直接粘贴;用鼠标选中你想拷贝的内容，自动就复制到剪切板；天神，这悉数的美感;点赞!</li><li>自定义aliases:打开Cmder目录下的config文件夹，里面的aliases文件就是我们可以配置的别名文件，只需将里面ls命令的别名按下列方式修改就可以在ls命令下显示中文。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;**Cmder**是windows系统环境下的命令行工具。对于使用过linux系统的人来说，windows下的cmd工具简直让我无法忍受，不过`Cmder`这款工具对于由于某些原因不得不在windows下进行工作的人来说，确实是一个福音。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="常用工具" scheme="http://www.huangxiang666.com/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="cmder" scheme="http://www.huangxiang666.com/tags/cmder/"/>
    
      <category term="cmd.linux" scheme="http://www.huangxiang666.com/tags/cmd-linux/"/>
    
      <category term="shell" scheme="http://www.huangxiang666.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下关于将普通用户权限提升为root的问题</title>
    <link href="http://www.huangxiang666.com/2017-02-28/Ubuntu%E4%B8%8B%E5%85%B3%E4%BA%8E%E5%B0%86%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E4%B8%BAroot%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <id>http://www.huangxiang666.com/2017-02-28/Ubuntu下关于将普通用户权限提升为root的问题.html</id>
    <published>2017-02-28T08:21:44.000Z</published>
    <updated>2017-12-10T17:38:05.884Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="问题的由来"><a href="#问题的由来" class="headerlink" title="问题的由来"></a>问题的由来</h3><ul><li>博主一个好奇就想把自己的那个用户提升为root级别的，所以进行了如下操作。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">vi etc/passwd</span><br><span class="line">然后将自己创建的那个用户（博主的用户名为lucas），对应的值</span><br><span class="line">lucas:x:1000:0:lucas,,,:/home/lucas:/bin/bash</span><br><span class="line">中的1000修改成了和root用户一样的0.</span><br><span class="line"></span><br><span class="line">好吧，这下lucas确实成了root用户了，但是问题就来了，你下次登录的适合界面上只剩下客人会话了。其它会话都没了。</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在用户登录界面，按下 `ctrl+alt+f7`进入命令行界面。</span><br><span class="line">按照如下操作进行：</span><br><span class="line">输入用户名：lucas（博主的）</span><br><span class="line">输入密码：xxxxxx</span><br><span class="line">然后使用vi命令打开我们修改过的文件：/etc/passwd</span><br><span class="line">将0修改成原来的数值。这样我们的登录界面又会出现用户登录啦！</span><br><span class="line">好吧。。至此，问题解决。</span><br></pre></td></tr></table></figure><p>PS：博主的Linux系统的Ubuntu kylin 15.10 的版本。具体的原因是ubuntu从12.04开始，添加了额外的root保护，不允许直接开启root账户，强制使账户改为root账户会被屏蔽。所以以后不能再继续作死了。老老实实的用sudo吧。%&gt;_&lt;%。</p><p>记录时间：2015年12月10日19:05:05。下班吃饭。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;由于博主刚刚接触linux，所以喜欢瞎琢磨。现在记录一下在将普通用户提升为root用户时出现的问题 &lt;/blockquote&gt;
    
    </summary>
    
      <category term="问题搜集整理" scheme="http://www.huangxiang666.com/categories/%E9%97%AE%E9%A2%98%E6%90%9C%E9%9B%86%E6%95%B4%E7%90%86/"/>
    
    
      <category term="ubuntu" scheme="http://www.huangxiang666.com/tags/ubuntu/"/>
    
      <category term="root权限" scheme="http://www.huangxiang666.com/tags/root%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下jdk环境变量的配置</title>
    <link href="http://www.huangxiang666.com/2017-02-28/ubuntu%E4%B8%8Bjdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.html"/>
    <id>http://www.huangxiang666.com/2017-02-28/ubuntu下jdk环境变量配置.html</id>
    <published>2017-02-28T08:21:21.000Z</published>
    <updated>2017-02-28T08:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Linux下jdk环境变量的配置"><a href="#Linux下jdk环境变量的配置" class="headerlink" title="Linux下jdk环境变量的配置"></a>Linux下jdk环境变量的配置</h2><p>PS:博主的系统版本是 ubuntu kylin 15.10。</p><h3 id="下载、及安装"><a href="#下载、及安装" class="headerlink" title="下载、及安装"></a>下载、及安装</h3><ul><li>下载:<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>下载完成之后就是解压了：</li></ul><blockquote><ol><li>进入到文件目录下执行该指令<code>sudo tar zxvf ./jdk-8u65-linux-x64.tar.gz</code></li><li>安装完成之后就是配置环境变量啦<br>2.1 打开/etc/profile文件：<code>sudo gedit /etc/profile</code><br>2.2 添加如下环境变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#set java environment  </span><br><span class="line">  </span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk版本 </span><br><span class="line">  </span><br><span class="line">export JRE_HOME=/usr/local/java/jdk版本/jre  </span><br><span class="line">  </span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH  </span><br><span class="line">  </span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$JAVA_HOME:$PATH</span><br></pre></td></tr></table></figure></li></ol><p>2.3 使得修改生效：一种是使用重启的方式使得修改生效，另一种则是使用<code>source /etc/profile</code>也可以使修改生效。</p><ol><li>输入<code>java -version</code>测试是否配置成功。<br>3.1 出现以下代码表示配置成功：</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lucas@lucas-ThinkPad-PC:~/java$ java -version</span><br><span class="line">java version &quot;1.8.0_65&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_65-b17)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode)</span><br></pre></td></tr></table></figure><blockquote><p>3.2 如出现如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">程序 &apos;java&apos; 已包含在下列软件包中：</span><br><span class="line"> * default-jre</span><br><span class="line"> * gcj-4.6-jre-headless</span><br><span class="line"> * gcj-4.7-jre-headless</span><br><span class="line"> * openjdk-7-jre-headless</span><br><span class="line"> * openjdk-6-jre-headless</span><br><span class="line">请尝试：sudo apt-get install &lt;选定的软件包&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>则可以通过以下方式来解决：</p><ul><li>在终端输入如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 这里是输入你的jdk安装目录以及版本号，具体的根据自己的设置去配。</span><br><span class="line">sudo update-alternatives --install /usr/bin/java java /home/lester/develop/jdk1.6.0_37/bin/java 300</span><br><span class="line"></span><br><span class="line">sudo update-alternatives --install /usr/bin/javac javac /home/lester/develop/jdk1.6.0_37/bin/javac 300</span><br></pre></td></tr></table></figure></li></ul><p>在配置完以上信息之后，再去<code>java -version</code> 进行测试。就能看到成功配置的信息啦！～</p><p>好了，初次接触linux下的开发，确实会遇到许多的问题，博主会将这些常见的问题一一记录下来，以便自己查看，也为了让其他和我一样刚入门的新手一些参考。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;由于博主刚刚接触linux，记录一下ubuntu下jdk环境变量的配置过程。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.huangxiang666.com/categories/java/"/>
    
    
      <category term="ubuntu" scheme="http://www.huangxiang666.com/tags/ubuntu/"/>
    
      <category term="java环境变量" scheme="http://www.huangxiang666.com/tags/java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
      <category term="jdk" scheme="http://www.huangxiang666.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Apache2服务器的搭建</title>
    <link href="http://www.huangxiang666.com/2017-02-28/Ubuntu%E4%B8%8BApache2%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA.html"/>
    <id>http://www.huangxiang666.com/2017-02-28/Ubuntu下Apache2服务器的搭建.html</id>
    <published>2017-02-28T08:21:02.000Z</published>
    <updated>2017-02-28T08:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Apache服务器的下载与安装"><a href="#Apache服务器的下载与安装" class="headerlink" title="Apache服务器的下载与安装"></a>Apache服务器的下载与安装</h2><p>博主选择的是使用apt-get开发包打包的方式安装的。下面是安装步骤：</p><ul><li><p>安装apache，在命令行终端中输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install apache2</span><br></pre></td></tr></table></figure></li><li><p>如果网络连接正常的话，应该是会顺利安装好的，在安装完成之后，需要重启apache服务，在命令行终端中输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/apache2 restart</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">&gt;  如果重启之后出现如下提示，则表示服务器已经启动成功了。</span><br></pre></td></tr></table></figure></li></ul><p>lucas@lucas-ThinkPad-PC:~$ sudo /etc/init.d/apache2 restart<br>[ ok ] Restarting apache2 (via systemctl): apache2.service.<br>```</p><blockquote><p>可能出现的问题1： NameVirtualHost * :80 has no VirtualHost.</p><blockquote><p>出现上述问题的原因：定义了多个NameVirtualHost，我们只需要将/etc/apahce2/ports.conf 中的NameVirtualHost * :80注释掉即可。</p></blockquote><p>可能出现的问题2： Could not reliably determine the server’s fully qualified domain name, using 127.0.1.1 for ServerName </p><ol><li>原因：根据提示，无法可靠的确定服务器的有效域名，使用127.0.1.1作为服务器域名。因此在下面的测试中，应该使用127.0.1.1，而不是127.0.0.1。</li><li>解决方法：终端输入<code>vim /etc/apache2/httpd.conf</code>，在文件中添加ServerName localhost:80 ，再次restart apache2,就可以使用127.0.0.1来访问web服务器了。</li></ol></blockquote><h2 id="Apache服务器的测试"><a href="#Apache服务器的测试" class="headerlink" title="Apache服务器的测试"></a>Apache服务器的测试</h2><p>既然已经安装好了，name我们当然应该测试一下了。</p><p>在浏览器中输入<code>http://localhost</code>或者<code>http://127.0.0.1</code>，如果看到了It works，那么就说明服务器成功安装了。Apache的默认安装，会在<code>var/www/</code>的目录，这个就是我们的web目录了，所有需要能够浏览器访问的web文件都要放在这个目录里。</p><p>下面是楼主的测试结果：<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/apache2%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87.jpg" alt="apahce服务器测试结果"></p><p>PS:好了。至此Ubuntu下Apache服务器的安装就已经完成，下面的文章中，我将继续Apache服务器配置文件的详解。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;刚接触服务器端的开发，今天上班头要求在unbuntu下先搭建一个服务器，于是乎，博主又开始摸索了。嗯～进入正题，楼主选择的是Apache服务器。楼主的系统版本是：Ubuntu Kylin 15.10.&lt;/blockquote&gt;
    
    </summary>
    
      <category term="实用工具" scheme="http://www.huangxiang666.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Apache2" scheme="http://www.huangxiang666.com/tags/Apache2/"/>
    
      <category term="服务器" scheme="http://www.huangxiang666.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="ubuntu" scheme="http://www.huangxiang666.com/tags/ubuntu/"/>
    
      <category term="linux" scheme="http://www.huangxiang666.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Bower:Additional error details:Name must be lowercase, can contain digits, dots, dashes, &quot;@&quot; or spaces</title>
    <link href="http://www.huangxiang666.com/2017-02-28/bower%20error.html"/>
    <id>http://www.huangxiang666.com/2017-02-28/bower error.html</id>
    <published>2017-02-28T08:20:29.000Z</published>
    <updated>2017-02-28T08:20:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在运行<code>bower install</code>安装第三方JS的时候，遇到以下错误提示：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\nginx-<span class="number">1.10</span>.2\html\parkhero2.0\master&gt;bower install</span><br><span class="line">bower                         EINVALID Failed to read E:\nginx-<span class="number">1.10</span>.2\html\parkhero2.0\master\bower.json</span><br><span class="line"></span><br><span class="line">Additional error details:</span><br><span class="line">Name must be lowercase, can contain digits, dots, dashes, <span class="string">"@"</span> or spaces</span><br></pre></td></tr></table></figure><p>看到这个错误有点懵比，因为一直是可以正常运行的，突然遇到这个错误，然后去检查了一下<code>bower.json</code>文件，发现错误的原因是：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"name": "Park", // 错误就在这里，上面提示了name必须小写，可以包含数字、点、破折号、@和空格</span><br><span class="line">"version": "2.0.0",</span><br></pre></td></tr></table></figure></p><p>好吧，至此问题就解决了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;park&quot;, // 改成小写</span><br><span class="line">&quot;version&quot;: &quot;2.0.0&quot;,</span><br></pre></td></tr></table></figure></p><p>修改完之后运行<code>bower install</code>,正常运行了。这是个小错误，记录一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Bower:Additional error details:Name must be lowercase, can contain digits, dots, dashes, &quot;@&quot; or spaces&lt;/blockquote&gt;
    
    </summary>
    
      <category term="错误收集" scheme="http://www.huangxiang666.com/categories/%E9%94%99%E8%AF%AF%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="Bower" scheme="http://www.huangxiang666.com/tags/Bower/"/>
    
      <category term="web" scheme="http://www.huangxiang666.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>使用Crypto-JS进行加密，以及使用angular的方式进行封装调用</title>
    <link href="http://www.huangxiang666.com/2017-02-28/%E4%BD%BF%E7%94%A8Crypto-JS%E8%BF%9B%E8%A1%8CAES%E5%8A%A0%E5%AF%86.html"/>
    <id>http://www.huangxiang666.com/2017-02-28/使用Crypto-JS进行AES加密.html</id>
    <published>2017-02-28T08:18:50.000Z</published>
    <updated>2017-02-28T08:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><center><br>## 使用Crypto-JS进行AES加密<br></center><p></p><p>在最近的项目中，调用登录接口，需要对账号密码数据进行AES加密后再进行传输，使用的是<em><code>AES/ECB/PKCS5Padding</code></em>,我前端部分使用选择了<em><code>CryptoJS</code></em>,现在把使用的过程记录如下。</p><hr><h4 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h4><ul><li>Crypto-JS的encrypt函数不会返回字符串，需要调用对象的toString方法，或者通过Crypto-js转码才能得到真实的结果。</li></ul><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li><p>引入<code>Crypto-JS</code>中的 <code>aes.js</code>及相关模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;bower_components/cryptojs/aes.js&quot;,</span><br><span class="line">&quot;bower_components/cryptojs/enc-utf8.js&quot;,</span><br><span class="line">&quot;bower_components/cryptojs/pad-pkcs7.js&quot;,</span><br><span class="line">&quot;bower_components/cryptojs/mode-ecb.js&quot;</span><br></pre></td></tr></table></figure></li><li><p>调用CryptoJS.AES</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方示例, 每次输出的密文都不一样,这样使用的话是错误的</span></span><br><span class="line">CryptoJS.AES.encrypt(<span class="string">"Message"</span>, <span class="string">"Secret Passphrase"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正确的使用姿势！！ */</span></span><br><span class="line"><span class="comment">// 使用用户名进行MD5，32位，作为key</span></span><br><span class="line"><span class="keyword">var</span> key_str = md5.createHash(username);</span><br><span class="line"><span class="comment">// 将key转换成128 bit</span></span><br><span class="line"><span class="keyword">var</span> key = CryptoJS.enc.Utf8.parse(key_str);</span><br><span class="line"><span class="comment">// 对password进行AES加密</span></span><br><span class="line"><span class="keyword">var</span> AESPass = CryptoJS.AES.encrypt(password, key, &#123;</span><br><span class="line">      mode: CryptoJS.mode.ECB,  <span class="comment">//补齐方式 CBC,ECB,etc.</span></span><br><span class="line">      padding: CryptoJS.pad.Pkcs7 <span class="comment">// 偏移规则设定  pack5，pkcs7，nopadding,etc.</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// CryptoJS 的 encrypt函数不会直接返回字符串，需要toString或者Crypto-JS进行转码才能得到真实的结果。</span></span><br><span class="line"><span class="keyword">var</span> pass = AESPass.toString();</span><br><span class="line"><span class="keyword">var</span> authData = Base64.encode(username + <span class="string">':'</span> + pass).replace(<span class="regexp">/[\r\n]/g</span>, <span class="string">''</span>); <span class="comment">// 去除回车换行符</span></span><br></pre></td></tr></table></figure><h3 id="使用AngularJS的方式调用CryptoJS-AES"><a href="#使用AngularJS的方式调用CryptoJS-AES" class="headerlink" title="使用AngularJS的方式调用CryptoJS.AES"></a>使用AngularJS的方式调用CryptoJS.AES</h3><ol><li>使用Angular将<code>AES</code>封装成一个<code>provider</code></li><li><p>提供两种方式设置key</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 一种为在angular.module('xxxx').config中进行设置，此种方式适用于key为一个固定值的情况</span></span><br><span class="line">CryptoKeyProvider.setCryptofraphyKey(<span class="string">'key'</span>) <span class="comment">// 在config中设置key</span></span><br><span class="line">$crypto.encrypto(<span class="string">'plaintext'</span>) <span class="comment">// 在业务逻辑处直接传入需要加密的明文进行调用</span></span><br><span class="line"><span class="comment">// 2. 第二种方式,每次都设置不同的key</span></span><br><span class="line">$crypto.encrypto(<span class="string">'plaintext'</span>,<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure></li><li><p>具体源码如下：</p><blockquote><p>注意：解密时，需要先将密文转换成<code>Base64</code>的编码的格式。</p><blockquote><ol><li>使用<code>CryptoJS.enc.Hex.parse</code>转换成十六进制</li><li>使用<code>CryptoJS.enc.Base64.stringify</code>将其变成Base64编码的字符串</li><li>最后才能传入<code>CryptoJS.AES.decrypt</code>方法对其解密</li></ol></blockquote></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;由于项目需要，对于登陆接口的密码需要进行AES加密后才进行传输&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Web开发" scheme="http://www.huangxiang666.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="AES" scheme="http://www.huangxiang666.com/tags/AES/"/>
    
      <category term="Web开发" scheme="http://www.huangxiang666.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
      <category term="CryptoJS" scheme="http://www.huangxiang666.com/tags/CryptoJS/"/>
    
  </entry>
  
  <entry>
    <title>python基本常识</title>
    <link href="http://www.huangxiang666.com/2017-02-28/python%E5%9F%BA%E6%9C%AC%E5%B8%B8%E8%AF%86.html"/>
    <id>http://www.huangxiang666.com/2017-02-28/python基本常识.html</id>
    <published>2017-02-28T08:06:29.000Z</published>
    <updated>2017-02-28T08:06:29.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Python的语法格式"><a href="#Python的语法格式" class="headerlink" title="Python的语法格式"></a>Python的语法格式</h2><p>Python是一种计算机编程语言，有着自己的一套语法格式。Python的语法格式非常简单，采用缩进的方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print absolute value of an integer:</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">0</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure></p><ul><li>以<code>#</code>开头的语句是注释，解释器会自动忽略。</li><li>当语句以<code>：</code>结束时，缩进的语句视为代码块。<blockquote><p>缩进有利有弊，好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是tab。按照约定俗成的习惯，应该使用<code>4个空格</code>的缩进。<br>缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把很长的一段代码拆分成若干函数，从而得到缩进较少的代码。<br>缩进的坏处就是“复制-粘贴”功能失效了，当我们重构代码时，粘贴过去的代码必须重新检查缩进是否正确。此外，IDE很难像Java代码那样格式化Python代码。</p></blockquote></li><li>Python程序是大小写敏感的，如果写错了大小写，程序会报错。</li></ul><h2 id="Python的数据类型"><a href="#Python的数据类型" class="headerlink" title="Python的数据类型"></a>Python的数据类型</h2><p>在Python中，能够直接处理的数据类型有以下几种：</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：<code>1</code>，<code>100</code>，<code>-8080</code>，<code>0</code>，等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和<code>0-9</code>，<code>a-f</code>表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把<code>10</code>用<code>e</code>替代，<code>1.23x109</code>就是<code>1.23e9</code>，或者<code>12.3e8</code>，<code>0.000012</code>可以写成<code>1.2e-5</code>，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以单引号’或双引号”括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。请注意，<code>&#39;&#39;</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分，因此，字符串<code>&#39;abc&#39;</code>只有<code>a，b，c</code>这3个字符。如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I，&#39;，m，空格，O，K</code>这6个字符。</p><p>如果字符串内部既包含<code>&#39;</code>又包含”怎么办？可以用转义字符<code>\</code>来标识，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'I\'m \"OK\"!'</span></span><br></pre></td></tr></table></figure></p><p>表示的字符串内容是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I<span class="string">'m "OK"!</span></span><br></pre></td></tr></table></figure></p><p>转义字符\可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>，可以在Python的交互式命令行用<code>print()</code>打印字符串看看：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'I\'m ok.'</span>)</span><br><span class="line">I<span class="string">'m ok.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print('</span>I\<span class="string">'m learning\nPython.'</span>)</span><br><span class="line">I<span class="string">'m learning</span></span><br><span class="line"><span class="string">Python.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print('</span>\\\n\\<span class="string">')</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">\</span></span><br></pre></td></tr></table></figure></p><p>如果字符串里面有很多字符都需要转义，就需要加很多<code>\</code>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义，可以自己试试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\\\t\\'</span>)</span><br><span class="line">\       \</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'\\\t\\'</span>)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure></p><p>如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容，可以自己试试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'''line1</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line2</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line3'''</span>)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure></p><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由<code>&gt;&gt;&gt;</code>变为<code>...</code>，提示你可以接着上一行输入。如果写成程序，就是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'''line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3'''</span>)</span><br></pre></td></tr></table></figure></p><p>多行字符串<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>还可以在前面加上r使用，请自行测试。</p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; True</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 3 &gt; 2</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 3 &gt; 5</span><br><span class="line">False</span><br></pre></td></tr></table></figure></p><p>布尔值可以用and、or和not运算。</p><p>and运算是与运算，只有所有都为True，and运算结果才是True：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">3</span> &gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>or运算是或运算，只要其中有一个为True，or运算结果就是True：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> &gt; <span class="number">3</span> <span class="keyword">or</span> <span class="number">1</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>not运算是非运算，它是一个单目运算符，把True变成False，False变成True：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>布尔值经常用在条件判断中，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'teenager'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p><p>此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p><p>变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>变量a是一个整数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t_007 = &apos;T007&apos;</span><br></pre></td></tr></table></figure></p><p>变量t_007是一个字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Answer = True</span><br></pre></td></tr></table></figure></p><p>变量Answer是一个布尔值True。</p><p>在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 123 # a是整数</span><br><span class="line">print(a)</span><br><span class="line">a = &apos;ABC&apos; # a变为字符串</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a = 123; // a是整数类型变量</span><br><span class="line">a = &quot;ABC&quot;; // 错误：不能把字符串赋给整型变量</span><br></pre></td></tr></table></figure></p><p>和静态语言相比，动态语言更灵活，就是这个原因。</p><p>请不要把赋值语句的等号等同于数学的等号。比如下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = 10</span><br><span class="line">x = x + 2</span><br></pre></td></tr></table></figure></p><p>如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。</p><p>最后，理解变量在计算机内存中的表示也非常重要。当我们写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;ABC&apos;</span><br></pre></td></tr></table></figure></p><p>时，Python解释器干了两件事情：</p><p>在内存中创建了一个’ABC’的字符串；</p><p>在内存中创建了一个名为a的变量，并把它指向’ABC’。</p><p>也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;ABC&apos;</span><br><span class="line">b = a</span><br><span class="line">a = &apos;XYZ&apos;</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PI = 3.14159265359</span><br></pre></td></tr></table></figure></p><p>但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</p><p>最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 10 / 3</span><br><span class="line">3.3333333333333335</span><br></pre></td></tr></table></figure></p><p>/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 9 / 3</span><br><span class="line">3.0</span><br></pre></td></tr></table></figure></p><p>还有一种除法是//，称为地板除，两个整数的除法仍然是整数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 10 // 3</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p>你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。</p><p>因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 10 % 3</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><p>无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p><h2 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h2><p>在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;包含中文的str&apos;)</span><br><span class="line">包含中文的str</span><br></pre></td></tr></table></figure></p><p>对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ord(&apos;A&apos;)</span><br><span class="line">65</span><br><span class="line">&gt;&gt;&gt; ord(&apos;中&apos;)</span><br><span class="line">20013</span><br><span class="line">&gt;&gt;&gt; chr(66)</span><br><span class="line">&apos;B&apos;</span><br><span class="line">&gt;&gt;&gt; chr(25991)</span><br><span class="line">&apos;文&apos;</span><br></pre></td></tr></table></figure></p><p>如果知道字符的整数编码，还可以用十六进制这么写str：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;\u4e2d\u6587&apos;</span><br><span class="line">&apos;中文&apos;</span><br></pre></td></tr></table></figure></p><p>两种写法完全是等价的。</p><p>由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。</p><p>Python对bytes类型的数据用带b前缀的单引号或双引号表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = b&apos;ABC&apos;</span><br></pre></td></tr></table></figure></p><p>要注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。</p><p>以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;ABC&apos;.encode(&apos;ascii&apos;)</span><br><span class="line">b&apos;ABC&apos;</span><br><span class="line">&gt;&gt;&gt; &apos;中文&apos;.encode(&apos;utf-8&apos;)</span><br><span class="line">b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;</span><br><span class="line">&gt;&gt;&gt; &apos;中文&apos;.encode(&apos;ascii&apos;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 0-1: ordinal not in range(128)</span><br></pre></td></tr></table></figure></p><p>纯英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。</p><p>在bytes中，无法显示为ASCII字符的字节，用\x##显示。</p><p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b&apos;ABC&apos;.decode(&apos;ascii&apos;)</span><br><span class="line">&apos;ABC&apos;</span><br><span class="line">&gt;&gt;&gt; b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;.decode(&apos;utf-8&apos;)</span><br><span class="line">&apos;中文&apos;</span><br></pre></td></tr></table></figure></p><p>要计算str包含多少个字符，可以用len()函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(&apos;ABC&apos;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; len(&apos;中文&apos;)</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(b&apos;ABC&apos;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; len(b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;)</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; len(&apos;中文&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">6</span><br></pre></td></tr></table></figure></p><p>可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。</p><p>在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。</p><p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure></p><p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p><p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p><p>申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码.<br>如果.py文件本身使用UTF-8编码，并且也申明了# -<em>- coding: utf-8 -</em>-，打开命令提示符测试就可以正常显示中文。</p><p>##格式化</p><p>最后一个常见的问题是如何输出格式化的字符串。我们经常会输出类似’亲爱的xxx你好！你xx月的话费是xx，余额是xx’之类的字符串，而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py-str-format</span><br></pre></td></tr></table></figure></p><p>在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;Hello, %s&apos; % &apos;world&apos;</span><br><span class="line">&apos;Hello, world&apos;</span><br><span class="line">&gt;&gt;&gt; &apos;Hi, %s, you have $%d.&apos; % (&apos;Michael&apos;, 1000000)</span><br><span class="line">&apos;Hi, Michael, you have $1000000.&apos;</span><br></pre></td></tr></table></figure></p><p>你可能猜到了，%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。</p><p>常见的占位符有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%d整数</span><br><span class="line">%f浮点数</span><br><span class="line">%s字符串</span><br><span class="line">%x十六进制整数</span><br></pre></td></tr></table></figure></p><p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;%2d-%02d&apos; % (3, 1)</span><br><span class="line">&apos; 3-01&apos;</span><br><span class="line">&gt;&gt;&gt; &apos;%.2f&apos; % 3.1415926</span><br><span class="line">&apos;3.14&apos;</span><br></pre></td></tr></table></figure></p><p>如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;Age: %s. Gender: %s&apos; % (25, True)</span><br><span class="line">&apos;Age: 25. Gender: True&apos;</span><br></pre></td></tr></table></figure></p><p>有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;growth rate: %d %%&apos; % 7</span><br><span class="line">&apos;growth rate: 7 %&apos;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;本篇博客主要介绍Python的语法格式、Python的数据类型以及Python的一些编码规范。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.huangxiang666.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.huangxiang666.com/tags/Python/"/>
    
      <category term="Python学习笔记" scheme="http://www.huangxiang666.com/tags/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>java概述</title>
    <link href="http://www.huangxiang666.com/2014-10-07/java%E6%A6%82%E8%BF%B0.html"/>
    <id>http://www.huangxiang666.com/2014-10-07/java概述.html</id>
    <published>2014-10-07T08:37:30.000Z</published>
    <updated>2017-02-28T09:56:48.185Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><p>Java是由sun公司推出的java面向对象程序设计语言和java平台的的总称。由James Gosling和同事们共同研发，于1995年正式推出。java最初称为Oak，1995年更名。其特点是：面向对象、通用性、高效性、安全性、跨平台。随着Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</p><h3 id="java语言的发展"><a href="#java语言的发展" class="headerlink" title="java语言的发展"></a>java语言的发展</h3><p>java自从1996年发布1.0版本起，经过近20年的发展，于2014年已发布了java 8版本。</p><h3 id="java语言的三个版本"><a href="#java语言的三个版本" class="headerlink" title="java语言的三个版本"></a>java语言的三个版本</h3><p>java语言共有三个版本：</p><ul><li>javase（J2SE，Java2 Platform Standard Edition，标准版）：是在java基础阶段主要学习的内容，包含了构成java语言核心的类，比如：数据库连接、接口定义、输入/输出、网络编程等。</li><li>javaee（J2EE，Java 2 Platform, Enterprise Edition，企业版）：用于服务端处理的企业版。该技术体系中包含的技术如Servlet Jsp等，主要针对于Web应用程序开发。</li><li>javame（J2ME，Java 2 Platform Micro Edition，微型版）：用于手机等嵌入式设备的“微型版”。<br>其中，Javame目前使用较少，市场上的大多数为android系统和ios系统的手机，都有自己的开发工具来完成软件的开发。</li></ul><h2 id="Java程序设计环境"><a href="#Java程序设计环境" class="headerlink" title="Java程序设计环境"></a>Java程序设计环境</h2><h3 id="Java虚拟机-JVM"><a href="#Java虚拟机-JVM" class="headerlink" title="Java虚拟机(JVM)"></a>Java虚拟机(JVM)</h3><ul><li>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</li><li>JVM是java的核心和基础，在java编译器和os平台之间的虚拟处理器，它是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象计算机，可在上面执行java的字节码程序。</li><li>JVM是java实现跨平台性的一个关键，JVM本身并不能跨平台，正是由于JVM在不同的操作系统上有着不同的版本，使得java程序可以“一次编译，反复运行”。</li></ul><h3 id="Java开发环境的搭建"><a href="#Java开发环境的搭建" class="headerlink" title="Java开发环境的搭建"></a>Java开发环境的搭建</h3><ul><li>JDK和JRE<ul><li>JDK(Java development kit):java开发工具包，其中包含了JRE和java开发工具。安装了JDK之后就能运行Java程序。</li><li>JRE(Java runtime environment):java运行环境。其中包含了JVM和核心类库，如果只是单独的运行java程序，安装JRE即可。</li></ul></li><li>JDK的下载与安装<ul><li>JDK开发工具箱的下载，可以到Oracle网站，地址是www.oracle.com/technetwork/javajavase/downloads，根据自己电脑的操作系统选择Windows、Linux、Mac OS X等相对应的版本。</li></ul></li><li><p>环境变量的配置<br>在完成了JDK的安装之后，我们还需要进行环境变量的配置：即将jdk/bin目录添加到执行路径中，在bin目录下存放着一些可执行程序，如javac，java，javadoc等。<br>配置环境变量的详细过程：</p><ul><li><p>首先，右击【我的电脑】—【属性】—–【高级】—【环境变量】，如图：<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F--1.jpg" alt="环境变量设置一"></p></li><li><p>将你jdk/bin目录加入进path中，以分号结束，但为了以后避免jdk重新安装时又要重新配置变量，我们可以在环境变量中新建一个名为%JAVA_HOME%的变量，变量值为jdk安装目录，再将%JAVA_HOME%/BIN加入到path中，如图：<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F--2.jpg" alt="环境变量配置2"><img src="http://7xt7l1.com1.z0.glb.clouddn.com/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F--3.jpg" alt="环境变量配置三"></p></li><li><p>测试环境变量是否配置成功，在DOS命令行下输入“javac”，输出帮助信息即为配置正确。如图：<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E8%AE%BE%E7%BD%AE%E6%88%90%E5%8A%9F.jpg" alt="环境变量配置成功"></p></li></ul></li></ul><p>下面提供一下临时配置环境变量的方法：<br>当我们需要用别人的电脑进行开发，不能对别人电脑的环境变量进行随意更改时，我们可以使用临时配置的方式。<br>临时的配置方式需要用到DOS命令行中的set命令，例如set path=” D:\Program Files\Java\jdk1.6.0_18\bin”就可以把配置临时的path变量，但是当我们再重新开启一个命令提示符窗口，该path就失去了效果。classpath也是相同的道理。</p><h3 id="java程序编译运行方法"><a href="#java程序编译运行方法" class="headerlink" title="java程序编译运行方法"></a>java程序编译运行方法</h3><ul><li>使用命令行方式<br>java程序的编译和运行可以通过dos命令行的方式：<ul><li>打开一个dos命令行窗口，可通过“win+R”的快捷键组合输入“cmd”的方式打开。</li><li>进入到java文件保存的目录。</li><li>执行javac文件名.java，对.java文件进行编译，生成.clss文件。</li><li>执行java文件名，即可执行该java程序。</li></ul></li></ul><p>下面用一个小程序做一个示范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行结果如图所示：<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/helloworld%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpg" alt="编译运行结果"><br>下面是一些dos命令行常用的命令：</p><blockquote><p>dir：列出当前文件夹目录<br>md：创建文件夹<br>rd：删除文件夹（必须保证文件夹是空的）<br>cd：进入文件目录<br>cd..：退回到上一级目录<br>cd/：退回到根目录<br>del：删除文件<br>exit：退出dos命令行</p></blockquote><ul><li>使用集成开发工具</li></ul><p>我们还可以通过使用java集成工具来进行java程序的开发，这里主要介绍的是如和使用Eclipse编译运行一个程序。Eclipse可以从网站<a href="http://eclipse.org上免费下载。使用eclipse的步骤如下：" target="_blank" rel="noopener">http://eclipse.org上免费下载。使用eclipse的步骤如下：</a></p><blockquote><p>启动eclipse，从菜单栏选择File—&gt;New—&gt;Java Project，打开新建的这个文件，在其中右键new—&gt;class文件。<br>进行java文件的编写<br>编写完java文件之后，右键Run–&gt;Run As–&gt;Java Application即可。</p></blockquote><h2 id="Java中的注释"><a href="#Java中的注释" class="headerlink" title="Java中的注释"></a>Java中的注释</h2><ul><li>注释的作用:<ul><li>1.注解，说明解释我们的程序，提高代码的阅读性</li><li>2.调试程序。当程序出现错误时，通过注释可以方便的查找出错的地方。</li></ul></li><li>注释的类型：单行注释、多行注释和文档注释三种。<ul><li>单行注释：//注释文字</li><li>多行注释：/<em>注释文字（可多行）</em>/  ，多行注释中不能嵌套多行注释</li><li>文档注释：/<em>*注释内容</em>/，是Java特有的注释，通常书写在类、域、构造函数、方法、定义之前。注释内容可以被JDK中的工具javadoc.exe所解析，生成一套以网页文件形式体现的该程序分说明文档。</li></ul></li><li>格式如图所示：<br><img src="http://7xt7l1.com1.z0.glb.clouddn.com/java%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A.jpg" alt="java中的注释"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;本篇文章主要介绍了一些java语言的基本概述以及java环境变量的配置&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java基础" scheme="http://www.huangxiang666.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java基础,java,java概述" scheme="http://www.huangxiang666.com/tags/java%E5%9F%BA%E7%A1%80-java-java%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>java基本语法(上)</title>
    <link href="http://www.huangxiang666.com/2014-03-01/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html"/>
    <id>http://www.huangxiang666.com/2014-03-01/java基本语法.html</id>
    <published>2014-03-01T09:02:04.000Z</published>
    <updated>2017-03-17T09:46:03.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java语言基础构成"><a href="#java语言基础构成" class="headerlink" title="java语言基础构成"></a>java语言基础构成</h2><p>java的基础由关键字、标识符、注释、常量和变量、运算符、语句、函数、数组构成。</p><a id="more"></a><h2 id="java关键字和保留字"><a href="#java关键字和保留字" class="headerlink" title="java关键字和保留字"></a>java关键字和保留字</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>定义：被java语言赋予了特殊涵义的单词。<br>特点：关键字中所有字母均为小写。</p><p>关键字共有50个，分为以下类型，都有其特殊含义。</p><ul><li>用于定义数据类型的关键字</li><li>用于定义流程控制的关键字</li><li>用于定义访问权限修饰符的关键字</li><li>用于定义类、函数、变量修饰符的关键字</li><li>用于定义类与类之间关系的关键字</li><li>用于建立实例及引用实例、判断实例的关键字</li><li>用于异常处理的关键字</li><li>用于包的关键字</li><li>其它修饰符关键字</li></ul><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p>const，goto</p><h2 id="java中的常量和变量"><a href="#java中的常量和变量" class="headerlink" title="java中的常量和变量"></a>java中的常量和变量</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量：表示不能改变的值。</p><ul><li><p>java中常量的分类</p><ul><li>整数常量：所有整数</li><li>小数常量：所有小数</li><li>布尔型常量：较为特有，只有两个数值，true和false</li><li>字符常量：将一个数字或字符使用单引号<code>&#39;&#39;</code>标识</li><li>字符串常量：将一个或多个字符使用双引号<code>&quot;&quot;</code>标识</li><li>null常量：只有一个数值，null</li></ul></li><li><p>对于整数，java有三种表现形式</p><ul><li>二进制：0和1表示，满2进1</li><li>十进制：0~9,满10进1</li><li>八进制：0~7，满8进1</li><li>十六进制：0~9，A~F，满16进1，开头用0x表示</li></ul></li><li><p>计算机采用二进制的原因</p><ul><li>技术实现简单，计算机由逻辑电路组成，逻辑电路通常只有两个状态，开关的接通与断开，这两种状态正好可以使用0和1来表示。</li><li>简化运算规则，两个二进制数和、积运算组合各有三种，运算规则简单，有利于简化计算机内部结构，提高运算速度。</li><li>适合逻辑运算，逻辑代数是逻辑运算的理论依据，二进制只有两个数码，正好与逻辑代数的”真”和”假”相吻合。</li><li>易于进行转换，二进制与十进制数易于相互转换。</li><li>用二进制表示数据具有抗干扰能力强，可靠性高等优点。因为每位数据只有高低两个状态，当受到一定程度的干扰时，仍能可靠的分辨出它是高是低。</li></ul></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h2 id="java中的运算符"><a href="#java中的运算符" class="headerlink" title="java中的运算符"></a>java中的运算符</h2><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>定义：在java语言中，对于变量、常量、函数、语句块也有名字，我们通通称之为标识符。标识符是用来给类、对象、方法、</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;本篇文章主要介绍java的基本语法。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java基础" scheme="http://www.huangxiang666.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java基本语法" scheme="http://www.huangxiang666.com/tags/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    
      <category term="java运算符" scheme="http://www.huangxiang666.com/tags/java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
</feed>
